<html><head><title>A BNF for TimeML</title></head><body><center><h1>TimeML Specification: Draft 2</h1></center><p><b>Release Date:</b> May 14, 2002<br><!-- <b>Revised:</b> April 25, 2002 --><p><b>Authors:</b> Bob Ingria and James Pustejovsky<p><b>TERQAS TimeML Working Group Members:</b> Branimir Boguraev, MichaelBukatin, Jose Castano, John Frank, Rob Gaizauskas, Bob Ingria, GrahamKatz, Andy Latto, Inderjeet Mani, James Pustejovsky, Erik Rauch,AntonioSanfilippo.<h2>1.0 Introduction</h2><p>This document describes the initial specification of the markuplanguagefor temporal and event expressions in text being developed by theTERQASTimeML Working Group. The group started with two major design goals:(1)to use the core of Andrea Setzer's thesis annotation, which waschristened STAG (Sheffield Temporal Annotation Guidelines); and (2) toremain, as much as possible, compliant with the TIDES TIMEX2annotationeffort. The initial list of tasks that were scheduled for the firstversion of TimeML is given below.<ol><li>Incorporate most of STAG.<li>Stay compliant (after study) with TIMEX2 guidelines.<li>Introduce a <tt>LINK</tt> tag: an object that links events/timesto events/times but consumes no input text. <li>Introduce a <tt>STATE</tt> tag: annotate only states that areupdated in the context of the narrative being tagged.<br>Any state persistent throughout the entire article would not be taggedas a state.<li>Enrich time relations: add immediately-after (<tt>IAFTER</tt>) andimmediately-before (<tt>IBEFORE</tt>). <li>Introduce <tt>scale</tt> as a relation attribute: we need toconvert preexisting Timex data into the TML standard.<li>Modify the <tt>DOA</tt> tag to have a tid attribute. <li>Introduce event identity (<tt>ID</tt>). <li>Added <tt>NONE</tt> as a value for the <tt>tense</tt> attribute.<li><tt>aspect</tt> is labeled as a signal but retains its existingvalues (<tt>NONE</tt>, <tt>PROGRESSIVE</tt>, <tt>PERFECTIVE</tt>).<li>Add temporal functions for doing temporal math on expressions suchas "last week".<br>Track this as an enrichment over the TIMEX2 guidelines. </ol><p>The working group also discussed the following features, although inless detail:<ol><li>Possibly identify "Event Clusters" or "time frames". This would beuseful for clustering related events in a narrative, temporalsegmentation of the narrative, by reducing the number of temporalrelations that need to be annotated.<li>Brief discussion of negation and modality. One suggestion is touse a <tt>polarity</tt> attribute on negative propositional content:<ol><li>The plane did not crash.<li>No survivors were found.</ol> <li>Enrich the Event Typology to improve temporal inference.<br>This is related to the next point.<li>Add hooks to the event ontology for event entailment operations. <li>Include event and time closure operations as part of TML. <li>It was suggested that the head verb should not be annotated as an<tt>EVENT</tt> but rather as a signal to the event.<br>This would mean that the &lt;LINK&gt; tag (see below) would containallthe semantic information in the annotation.<li>Introduce init and cul attributes to events, or either reify initand cul as events, to handle aspectual events: <ol><li>The party will begin at noon. <li>The man began the lecture at noon. </ol></ol><p>In the remainder of the document, we outline a BNF for TimeML, withtheultimate goal of specifying complete XML schema definitions for thelanguage, and not simply a DTD. The reason why an XML schema ispreferable to a DTD is that an XML schema provides an initial richersetof data types for constraining the value of attributes, and alsoprovides a mechanism for adding user-defined types.<h2>2.0 From STAG to TimeML</h2><p>This section presents a BNF for the temporal annotation languagepresented in Andrea Setzer's thesis (Setzer, 2001).  Consideration ofthe details of this BNF, which, as noted above, the TimeML workinggroupcame to call STAG (Sheffield Temporal Annotation Guidelines), inconjunction with problems raised in trying to apply it to actualtexts,resulted in several changes and extensions to Setzer's originalscheme. Detailing these issues will help justify the details of this initialpass at TimeML.<p>A note on attribute values: All attribute values are marked as 'potential values' in Setzer'sthesis; those marked with * may need to have a larger, but stillclosed,set specified.  Those not so marked are probably sufficient as is.<h3>2.1 Tags and Attributes for STAG</h3><h3>&lt;EVENT&gt;</h3><pre>attributes ::= eid class [argEvent] [tense] [aspect] [([signalID]relatedToEvent eventRelType) | ([signalID] relatedToTime timeRelType)]</pre>//* N.B. argEvent is dependent on class='REPORTING'<pre>eid ::= &lt;integer&gt;*class ::= 'OCCURRENCE' | 'PERCEPTION' | 'REPORTING' | 'ASPECTUAL'argEvent ::= &lt;integer&gt;tense ::= 'PAST' | 'PRESENT' | 'FUTURE'aspect ::= 'PROGRESSIVE' | 'PERFECTIVE'signalID ::= &lt;integer&gt;relatedToEvent ::= &lt;integer&gt;*eventRelType ::= 'BEFORE' | 'AFTER' | 'INCLUDES' | 'IS_INCLUDED' |'SIMULTANEOUS'relatedToTime ::= &lt;integer&gt;*timeRelType ::= 'BEFORE' | 'AFTER' | 'INCLUDES' | 'IS_INCLUDED' |'SIMULTANEOUS'</pre><h3>&lt;TIMEX&gt;</h3><pre>attributes ::= tid type calDate [(eid signalID relType)]</pre>//* calDate is limited to [[DD]MM]YYYY |('SPR'|'SUM'|'AUT'|'WIN')YYYY<br>//* A standard SGML or XML DTD cannot represent this, but an XMLschema can<p>//* N.B. (eid signalID relType) is dependent on type='COMPLEX'<pre>tid ::= &lt;integer&gt;*type ::= 'DATE' | 'TIME' | 'COMPLEX'calDate ::= PCDATAeid ::= &lt;integer&gt;signalID ::= &lt;integer&gt;*relType ::= 'BEFORE' | 'AFTER' | 'INCLUDES' | 'IS_INCLUDED' |'SIMULTANEOUS'</pre><h3>&lt;SIGNAL&gt;</h3><pre>attributes ::= sid</pre><pre>sid ::= &lt;integer&gt;</pre><h3>&lt;DOA&gt;</h3><p>'DOA' stands for 'Date of article'.<p>No attributes<h3>2.2 Comments and Extensions</h3><p>One thing that is striking in looking at this BNF is this fragment ofthe attribute structure of EVENT:<pre>[([signalID] relatedToEvent eventRelType) | ([signalID] relatedToTimetimeRelType)]</pre><p>In each case, we are dealing not with three unrelated attributes, butwith three attributes that only make sense as a unit.  The same triadalso appears in the attribute structure of TIMEX:<pre>[(eid signalID relType)]</pre><p>Moreover, as the specification of the values for the<tt>eventRelType</tt> and <tt>timeRelType</tt> attributes of EVENT andthe <tt>relType</tt> attribute of TIMEX, we are really dealing withoneproperty, whose values are specified three times.  This is forced inthecase of <tt>eventRelType</tt> and <tt>timeRelType</tt> for EVENT byvirtue of the fact that only the name of the attribute can link it to<tt>relatedToEvent</tt> or <tt>relatedToTime</tt>, respectively. And,ofcourse, since <tt>relType</tt> is defined on TIMEX, not EVENT, it mustrepeat the specification of permissible values.<p>All these considerations suggest that these triplets of attributesshould be factored out into the form of a new abstract tag (i.e. onewhich consumes no input text).  This would formally express the factthat these attributes are linked, allow <tt>eventRelType</tt>,<tt>timeRelType</tt> and <tt>relType</tt> to be collapsed into asingleattribute, and allow the specification of the possible values of thissingle attribute to be stated only once.<p>[Note: Of course in BNF (or in an XML DTD) it would be possible tospecify an abstract element as the value of <tt>eventRelType</tt>,<tt>timeRelType</tt> and <tt>relType</tt> and thus state theirpossiblevalues only once, but we would still be left with the fact that theinherent relation between a signalID, relatedID, and relType would beunexpressed in the STAG annotation language.]<p>For these reasons, we remove the cited triplets from the definition ofEVENT and TIMEX and introduce the tag:<h3>&lt;LINK&gt;</h3><pre>attributes ::= (eventID | timeID) [signalID] (relatedToEvent |relatedToTime) relType</pre><pre>eventID ::= &lt;integer&gt;timeID ::= &lt;integer&gt;signalID ::= &lt;integer&gt;relatedToEvent ::= &lt;integer&gt;relatedToTime ::= &lt;integer&gt;*relType ::= 'BEFORE' | 'AFTER' | 'INCLUDES' | 'IS_INCLUDED' |'SIMULTANEOUS'</pre><p><tt>eventID</tt> and <tt>timeID</tt> are used to anchor the link to anEVENT or TIMEX (the element that would have contained the [signalID](relatedToEvent | relatedToTime) relType triple before it was factoredout into LINK).  Note that factoring out this triplet also entailsthatthe decision on where to record this information is now no longerarbitrary.  Previously, the information could be recorded on either oftwo related events, but there was no principle to decide which eventshould contain this information.<p>In addition to purely formal considerations of the geometry of STAG(essentially, refactoring considerations, in the sense of Fowler(1999)and many others), the TimeML working group also found empiricalconsiderations motivating adding the LINK tag.  The original STAGframework had been designed with the presupposition that any givenEVENTwould be related to at most one other EVENT or other indexed element. Attempts to annotate various newswire articles showed that thisassumption was false, and that a single EVENT could be related to morethan one other indexed element.  Here is one such example:<h3>2.2.1 Document Annotation in STAG</h3><pre>FAMILIES SUE OVER AREOFLOT CRASH DEATHS   The Russian airline Aeroflot has been&lt;EVENT eid=1 relatedToTime=1 timeRelType=BEFORE tense=PRESENTaspect=PERFECTIVE class=OCCURRENCE&gt;hit&lt;/EVENT&gt;with a writ for loss and damages,&lt;EVENT eid=2 tense=NONE aspect=PERFECTIVE relatedToEvent=1eventRelType=BEFORE class=OCCURRENCE&gt;filed&lt;/EVENT&gt;in Hong Kong by the families of seven passengers&lt;EVENT eid=3 tense=NONE aspect=PERFECTIVE relatedToEvent=2eventRelType=BEFOREclass=OCCURRENCE relatedToEvent2=4 eventRel2Type=IS_INCLUDEDsignal2=1&gt;killed&lt;/EVENT&gt;&lt;SIGNAL sid=1&gt;in&lt;/SIGNAL&gt;an air&lt;EVENT eid=4 class=OCCURRENCE&gt;crash&lt;/EVENT&gt;.   All 75 people&lt;STATE stid=1 relatedToEvent=5 eventRelType=INCLUDES&gt;on board&lt;/STATE&gt;the Aeroflot Airbus&lt;EVENT eid=5 tense=PAST aspect=PERFECTIVE relatedToEvent=6eventRelType=IAFTER signal=2&gt;died&lt;/EVENT&gt;&lt;SIGNAL sid=2&gt;when&lt;/SIGNAL&gt;it&lt;EVENT eid=6 tense=PAST aspect=PERFECTIVE relatedToTime=2timeRelType=IS_INCLUDED relatedToEvent=4 eventRelType=ID&gt;ploughed&lt;/EVENT&gt;into a Siberian mountain&lt;SIGNAL sid=3&gt;in&lt;/SIGNAL&gt;&lt;TIMEX tid=2 type=DATE calDate=041994&gt;March 1994&lt;/TIMEX&gt;....&lt;DOA tid=1&gt;03-27-96&lt;/DOA&gt;</pre><p>There are several notable features of this annotation.  First, noticethis &lt;EVENT&gt; element:<pre>&lt;EVENT eid=3 tense=NONE aspect=PERFECTIVE relatedToEvent=2eventRelType=BEFOREclass=OCCURRENCE relatedToEvent2=4 eventRel2Type=IS_INCLUDEDsignal2=1&gt;killed&lt;/EVENT&gt;</pre><p>which features the addition of the ad hoc attributes<tt>relatedToEvent2</tt> and <tt>eventRel2Type</tt> as an attempt toallow multiple related events, along with the new attribute<tt>signal2</tt>, to link the signal to this related event and noother.Clearly this solution is fragile, in that it requires either a cut-offof related events at some arbitrary number or else an open-ended setoftriplets of the form:<pre>signal<i>N</i> relatedToEvent<i>N</i> and eventRel<i>N</i>Type</pre><p>Note that the LINK tag introduced above solves both the problem of thepotentially unbounded number of related events and that of relating aparticular signal to a given related EVENT (or other indexed element).<h3>2.2.2 Document Annotation with LINK</h3><p>Given the existence of the LINK tag, we can rewrite the aboveannotationas follows:<pre>FAMILIES SUE OVER AREOFLOT CRASH DEATHS   The Russian airline Aeroflot has been&lt;EVENT eid=1 tense=PRESENT aspect=PERFECTIVE class=OCCURRENCE&gt;hit&lt;/EVENT&gt;&lt;LINK eventID=1 relatedToTime=1 relType=BEFORE/&gt;with a writ for loss and damages,&lt;EVENT eid=2 tense=NONE aspect=PERFECTIVE class=OCCURRENCE&gt;filed&lt;/EVENT&gt;&lt;LINK eventID=2 relatedToEvent=1 relType=BEFORE/&gt;in Hong Kong by the families of seven passengers&lt;EVENT eid=3 tense=NONE aspect=PERFECTIVE class=OCCURRENCE&gt;killed&lt;/EVENT&gt;&lt;LINK eventID=3 relatedToEvent=2 relType=BEFORE/&gt;&lt;LINK eventID=3 signalID=1 relatedToEvent=4relType=IS_INCLUDED/&gt;&lt;SIGNAL sid=1&gt;in&lt;/SIGNAL&gt;an air&lt;EVENT eid=4 class=OCCURRENCE&gt;crash&lt;/EVENT&gt;.   All 75 people&lt;STATE stid=1&gt;on board&lt;/STATE&gt;&lt;LINK stateID=1 relatedToEvent=5 relType=INCLUDES/&gt;the Aeroflot Airbus&lt;EVENT eid=5 tense=PAST aspect=PERFECTIVE&gt;died&lt;/EVENT&gt;&lt;LINK eventID=5 signalID=2 relatedToEvent=6 relType=IAFTER/&gt;&lt;SIGNAL sid=2&gt;when&lt;/SIGNAL&gt;it&lt;EVENT eid=6 tense=PAST aspect=PERFECTIVE&gt;ploughed&lt;/EVENT&gt;&lt;LINK eventID=6 relatedToTime=2 relType=IS_INCLUDED/&gt;&lt;LINK eventID=6 relatedToEvent=4 relType=ID/&gt;into a Siberian mountain&lt;SIGNAL sid=3&gt;in&lt;/SIGNAL&gt;&lt;TIMEX tid=2 type=DATE calDate=041994&gt;March 1994&lt;/TIMEX&gt;....&lt;DOA tid=1&gt;03-27-96&lt;/DOA&gt;</pre><p>In addition to the abstraction that LINK provides, there are severalother additions exhibited in the annotation presented above.<h2>3.0 Further Additions</h2><h3>3.1 Modifications to Existing Tags and Attributes</h3><h3>&lt;EVENT&gt;</h3><p>The <tt>tense</tt> attribute adds the value:<DL><DT><TT>'NONE'</TT><DD>for untensed verb forms, such as participles, etc.</DL><h3>&lt;DOA&gt;</h3><p>DOA previously had no attributes; it now adds the attribute<DL><DT>tid ::= &lt;integer&gt;<DD>which allows the DOA to serve as a temporal anchor for the entirearticle</DL><h3>&lt;LINK&gt;</h3><p>The <tt>relType</tt> attribute adds the values:<DL><DT><TT>'IAFTER'</TT><DD>immediately after<DT><TT>'IBEFORE'</TT><DD>immediately before<DT><TT>'ID'</TT><DD>identity (of events)</DL><h3>3.2 New Tags</h3><h3>&lt;STATE&gt;</h3><pre>attributes ::= stid</pre><pre>stid ::= &lt;integer&gt;</pre><p>The TimeML working group found that, in addition to annotating events,it is also useful to annotate a select subset of states.  We havedecided to recognize  for markup, only those states which areidentifiably changed over the course of  the document being marked up.For example, in the present document, in the  expression the AeroflotAirbus the relationship indicating that the Airbus is  run andoperatedby Aeroflot is not a State in the present sense here. Rather,  becauseit is persistent throughout the event line of the document, we factorit out and it is not marked up. On the other hand, properties that areknown to  change during the events represented/reported in an articlewill be marked as  States, as illustrated below:<pre>All 75 people&lt;STATE stid=1&gt;on board&lt;/STATE&gt;&lt;LINK stateID=1 relatedToEvent=5 relType=INCLUDES/&gt;the Aeroflot Airbus&lt;EVENT eid=5 tense=PAST aspect=PERFECTIVE&gt;died&lt;/EVENT&gt;&lt;LINK eventID=5 signalID=2 relatedToEvent=6 relType=IAFTER/&gt;&lt;SIGNAL sid=2&gt;</pre><h2>4.0 BNF for TimeML</h2><h3>4.1 Tags and Attributes Defined Above</h3><!-- Tags and Attributes for TimeML Stage 1 --><p>Putting together all the modifications and additions discussed abovegives us the following BNF for a first pass at TimeML.<h3>&lt;EVENT&gt;</h3><pre>attributes ::= eid class [argEvent] [tense] [aspect]</pre>//* N.B. argEvent is dependent on class='REPORTING'<pre>eid ::= &lt;integer&gt;*class ::= 'OCCURRENCE' | 'PERCEPTION' | 'REPORTING' | 'ASPECTUAL'argEvent ::= &lt;integer&gt;tense ::= 'PAST' | 'PRESENT' | 'FUTURE' | 'NONE'aspect ::= 'PROGRESSIVE' | 'PERFECTIVE'</pre><h3>&lt;TIMEX&gt;</h3><pre>attributes ::= tid type calDate</pre>//* calDate is limited to [[DD]MM]YYYY |('SPR'|'SUM'|'AUT'|'WIN')YYYY<br>//* A standard SGML or XML DTD cannot represent this, but an XMLschema can<pre>tid ::= &lt;integer&gt;*type ::= 'DATE' | 'TIME' | 'COMPLEX'calDate ::= PCDATA</pre><h3>&lt;STATE&gt;</h3><pre>attributes ::= stid</pre><pre>stid ::= &lt;integer&gt;</pre><h3>&lt;SIGNAL&gt;</h3><pre>attributes ::= sid</pre><pre>sid ::= &lt;integer&gt;</pre><h3>&lt;DOA&gt;</h3><p>'DOA' stands for 'Date of article'.<pre>attributes ::= tid</pre><pre>tid ::= &lt;integer&gt;</pre><h3>&lt;LINK&gt;</h3><pre>attributes ::= (eventID | timeID | stateID) [signalID] (relatedToEvent| relatedToTime) relType</pre><pre>eventID ::= &lt;integer&gt;timeID ::= &lt;integer&gt;stateID ::= &lt;integer&gt;signalID ::= &lt;integer&gt;relatedToEvent ::= &lt;integer&gt;relatedToTime ::= &lt;integer&gt;*relType ::= 'BEFORE' | 'AFTER' | 'INCLUDES' | 'IS_INCLUDED' |'SIMULTANEOUS' | 'IAFTER' | 'IBEFORE' | 'ID'</pre><h3>4.2 Additional Tags and Attributes</h3><h3>TEMPORAL FUNCTIONS</h3><p>The working group discussed the case of temporal expressions where thecalendar  date is not referred to directly, but there is an expressionthat acts as a  temporal function over a Timex expression. Differentexamples of this are given  below.<ol><li>John died last Monday.<li>John will die next month.<li>John died two weeks ago.</ol><p>Assume these are all bound to an event predicate such as "John died",with an  already established DOA. One proposal is to treat the"modifiers" such as  "next", "last", and "N_&lt;time-unit&gt;_ago" assignals, relating to other times and  events. For example, (1) wouldbemarked up as follows:<pre> &lt;DOA tid=1&gt;DDMMYYYY&lt;/DOA&gt;he&lt;EVENT eid=1 tense=PAST aspect=PERFECTIVE&gt;died&lt;/EVENT&gt;&lt;SIGNAL sid=1&gt;last&lt;/SIGNAL&gt;&lt;LINK  eventID=1 signalID=1 relatedToTime=2 relType=BEFOREmagnitude=+1/&gt;&lt;TIMEX tid=2 type=DATE&gt;Monday&lt;/TIMEX&gt;.Sentence (2) would be represented as follows: &lt;DOA tid=1&gt;DDMMYYYY&lt;/DOA&gt;he&lt;EVENT eid=1 tense=FUTURE &gt;die&lt;/EVENT&gt;&lt;SIGNAL sid=1&gt;next&lt;/SIGNAL&gt;&lt;LINK eventID=1 signalID=1 relatedToTime=2 relType=AFTERmagnitude=+1/&gt;&lt;TIMEX tid=2 type=DATE&gt;month&lt;/TIMEX&gt;.</pre><p>It would also be possible to link the temporal function expression tothe DOA,  but this would make it less explicit how the event predicateof "die" is bound  to "last Monday". Furthermore, this would not beparallel to the derivation of  "John died on Monday". <pre>&lt;DOA tid=1&gt;DDMMYYYY&lt;/DOA&gt;he&lt;EVENT eid=1 tense=PAST&gt;died&lt;/EVENT&gt;&lt;SIGNAL sid=1&gt;on&lt;/SIGNAL&gt;&lt;LINK eventID=1 signalID=1 relatedToTime=2 relType=IS_INCLUDEDmagnitude=0/&gt;&lt;TIMEX tid=2 type=DATE&gt;Monday&lt;/TIMEX&gt;.</pre><p>Notice that this particular proposal has added a new attribute to&lt;LINK&gt;,  magnitude, which acts as a quantifier over theappropriate temporal granularity.  The granularity is dependent uponthetype and the caldate of the &lt;TIMEX&gt;.  Hence, if the value is"Monday", then the granularity for magnitude to operated  over is aweek, and so on. This relates to the issues in the Ontology Working Group as well as Hobbs' Semantic Web Temporal Spec Notes.  Hence, thenew specification for &lt;LINK&gt; is as follows: <h3>&lt;LINK&gt;</h3><pre>attributes ::= (eventID | timeID | stateID) [signalID] (relatedToEvent| relatedToTime) relType magnitude eventID ::= &lt;integer&gt;timeID ::= &lt;integer&gt;stateID ::= &lt;integer&gt;signalID ::= &lt;integer&gt;relatedToEvent ::= &lt;integer&gt;relatedToTime ::= &lt;integer&gt;*relType ::= 'BEFORE' | 'AFTER' | 'INCLUDES' | 'IS_INCLUDED' |'SIMULTANEOUS' | 'IAFTER' | 'IBEFORE' | 'ID'magnitude ::= &lt;integer&gt;</pre><p>There are many cases of the temporal functions that were discussed bythe WG  that will perhaps be handled in a slightly different way, ifthis is adopted.  For example, reference to events directly would bemore complex:<ol><li>He died the week before the party.<li>He died after the hijacking.</ol><p>In addition to the need for temporal functions of the sort sketchedoutto  handle expressions beyond those handled by the TIMEX2 annotation,they are also  useful for creating intensional descriptions oftemporalexpressions. During the  first meetings of the plenary group, it wasdiscovered that many temporal  expressions are too indeterminate orfuzzy to be reduced to a concrete ISO time  value.  <h3>&lt;SCALE&gt;</h3><p>The notion of scale was introduced, but we will defer discussion untilthe next version of this document.<h2>Temporal Functions</h2><p>Various temporal expressions have interpretations that are bestexpressed in terms of temporal functions.   For example, temporalexpressions like the following might be annotated with interpetationssuch as those specified.  (We have used pre-theoretical, but fairlytransparentm\, names to represent the hypothetical functions.  DOA isthedate of the article, presupposed for concreteness.)<blockquote><pre>last week = (predecessor (week DOA))last Thursday = (thursday (predecessor (week DOA))the week before last = (predecessor (predecessor (week DOA)))next week = (successor (week DOA))</pre></blockquote><p>Such representations present a problem for annotation because theneededfunctions, which would be best expressed as XML tags, can't appear asthe values of attributes in another XML tag.  As always, the solutionisto use a tag's ID as the value of an attribute, in place of the tagitself. Given this strategy, TimeML can define whatever functions arenecessary, and pass in the id of a function (tag) whenever we want touse it as the value of an attribute.  If we further allow theargumentsof functions to be function IDs, we can compose functions by usingtheirIDs as pointers (much as in the box and pointer notation for LISP). Toshow how this would work, we present the following sampleannotations. For concreteness, we assume each appears in a document which has<blockquote><pre>&lt;DOA tid=t1&gt;</pre></blockquote><p>This ID provides a temporal anchor in all the examples.<p>(1) last week<pre>&lt;SIGNAL sid=1&gt;last&lt;/SIGNAL&gt;&lt;TIMEX3 tid=2 type=DATE valueFromFunction=tf2&gt;week&lt;/TIMEX3&gt;&lt;coerceTo tfid=tf1 argumentID=t1 value=WEEK/&gt;&lt;predecessor tfid=tf2 signalID=1 argumentID=tf1 value=1/&gt;</pre><p>(2) last Thursday<pre>&lt;SIGNAL sid=1&gt;last&lt;/SIGNAL&gt;&lt;TIMEX3 tid=2 type=DATE valueFromFunction=tf3&gt;Thursday&lt;/TIMEX3&gt;&lt;coerceTo tfid=tf1 argumentID=t1 value=WEEK/&gt;&lt;predecessor tfid=tf2 signalID=1 argumentID=tf1 value=1/&gt;&lt;getNamedElementOf tfid=tf3 argumentID=tf2 value=THURSDAY/&gt;</pre><p>N.B. 'last Thursday' and 'Thursday of last week' should get the sameinterpretation.<p>(3) the week before last<pre>&lt;TIMEX3 tid=2 type=DATE valueFromFunction=tf2&gt;the week&lt;/TIMEX3&gt;&lt;SIGNAL sid=1&gt;before last&lt;/SIGNAL&gt;&lt;coerceTo tfid=tf1 argumentID=t1 value=WEEK/&gt;&lt;predecessor tfid=tf2 signalID=1 argumentID=tf1 value=2/&gt;</pre><p>(4) next week<pre>&lt;SIGNAL sid=1&gt;next&lt;/SIGNAL&gt;&lt;TIMEX3 tid=2 type=DATE valueFromFunction=tf2&gt;week&lt;/TIMEX3&gt;&lt;coerceTo tfid=tf1 argumentID=t1 value=WEEK/&gt;&lt;successor tfid=tf2 signalID=1 argumentID=tf1 value=1/&gt;</pre><p>Some notes on these sample representations:<ol><li>We have used pre-theoretical, relatively obvious names for thefunctions in the examples above.  We intend to use functions (tags)that, as closely as possible, follow the names of the temporalfunctionsin the ontology we adopt.   By doing this, our ontology would provideadenotational semantics for our XML-based temporal function markup.<li>Similarly, we have used relatively arbitrary and whitebread namesfor the attributes of the sample temporal functions (i.e. 'argumentID'and 'value').  We would want to give the attributes (i.e. arguments orparameters) of these function entities more meaningful names in thefinal version of this specification.<li>Since it would be unwieldy for our markup to recursively wrapSUCCESSOR (or PREDECESSOR) around itself, we have given SUCCESSOR (andPREDECESSOR) a second integer argument, which essentially encodes thenumber of calls to the function; i.e.<blockquote><pre>(SUCCESSOR foo 1) = (primSuccessor foo)(SUCCESSOR foo 2) = (primSuccessor (primSuccessor foo))...(SUCCESSOR foo n) = (primSuccessor_1 ... (primSuccessor_n foo) ...)</pre></blockquote><p>This is much like the INCF (increment-by) and DECF (decrement-by)functions in Common LISP, except that INCF and DECF allow their secondargument to not appear, in which case it defaults to 1.   For ourpurposes, we want the 'count' argument to always be present.<!-- Note, by the way, that this proposal means that we don't need togive IDs to the starting and ending points of EVENTs, TIMEXes, etc.Wecan simply use the IDs of the endPointOf and startPointOf (or whateverwe call these functions) functions as values. --></ol><h2>Aspectual Verbs</h2><p>Relations expressed through predicates and  nominal expressions aretypically anchored as deictic events. Aspect expressed on the verb isa means of looking inside the event to focus on a segment orparticular part of an event. For example, <ol><li> a. John built the house. <br>b. John has built the house. <br>c. John is building the house.  <br>d. John had built the house. </ol>In languages such as English and French,there is an additional grammatical device of aspectualpredication, which focuses on four facets of the event history:<ol><li> a. Initiation: <i>begin</>, <i>start</> <br>b. Termination: <i>stop</>, <i>end</> <br>c. Completion: <i>finish</>, <i>complete</> <br>d. Continuation: <i>continue</>, <i>keep</> <br></ol> Here, a member of a closed class of predicates is able toselect a verbal or nominal complement as an argument and mark thatevent with the function (designation) associated with one of thefacets above. <p>For TimeML, we will designate the class of aspectual predicates asevents of class ASPECTUAL. This class will have an additionalattribute which we will call PHASE. This attribute will take one ofthe four facets listed above. Finally, we will add the attributeARGEVENT to ASPECTUAL events as well. <h3>&lt;EVENT&gt;</h3><pre>attributes ::= eid class [argEvent] [tense] [aspect] [phase]</pre>//* N.B. argEvent is dependent on class='REPORTING' orclass='ASPECTUAL'' <pre>eid ::= &lt;integer&gt;*class ::= 'OCCURRENCE' | 'PERCEPTION' | 'REPORTING' | 'ASPECTUAL'argEvent ::= &lt;integer&gt;tense ::= 'PAST' | 'PRESENT' | 'FUTURE' | 'NONE'aspect ::= 'PROGRESSIVE' | 'PERFECTIVE'phase ::= 'INITIATION' | 'COMPLETION' | 'TERMINATION' | 'CONTINUATION'</pre><p>To illustrate this mark up, consider a couple of example sentences. <ol><li> The boat began to sink quickly. <li> The search party stopped looking for the survivors. </ol>These two sentences are represented below in the markup definedabove. <pre>The boat&lt;EVENT eid=1 tense=PAST aspect=PERFECTIVE phase=INITIATIONargEvent=2 &gt;began&lt;/EVENT&gt;&lt;EVENT eid=2 tense=null aspect= null&gt;sink&lt;/EVENT&gt;. The search party&lt;EVENT eid=1 tense=PAST aspect=PERFECTIVE phase=TERMINATIONargEvent=2&gt;stopped&lt;/EVENT&gt;&lt;EVENT eid=2 tense=null aspect= PROGRESSIVE&gt;looking&lt;/EVENT&gt;. for the survivors. </pre><h2>Confidence Levels</h2><p>In various discussions of the full TERQAS groups, the utility of beingable to mark confidence values for various aspects of the annotationwaspointed out.  In general, it would be useful to allow confidencevalues to beassigned to any tag, and, in fact, to any attribute of any tag.<p>A convenient way to do this would be to create a confidence tag, whichwould consume no input, and which would have the following attributes:<h3>&lt;CONFIDENCE&gt;</h3><pre>attributes ::= tagType tagID [attributeName] confidenceValue</pre><p>where<dl><DT>tagType<DD>would range over the names of all the tags of TimeML<DT>tagID<DD>would range over the set of actual tag IDs within the currentdocument<DT>attributeName<DD>would range over the names of all the attributes of all the tagsof TimeML<DT>confidenceValue<DD>would range over the rationals (i.e. would have a floating pointvalue) between 0 and 1</DL><p>So, for example, given this annotation:<pre>The TWA flight&lt;EVENT eid=1 class=OCCURRENCE tense=PAST aspect=NONE&gt;crashlanded&lt;/EVENT&gt;&lt;LINK eventID=1 signalID=1 relatedToTime=1 relType=BEFOREdurationID=1/&gt;on Easter Island&lt;DURATION did=1 value=2w&gt;two weeks&lt;/DURATION&gt;&lt;SIGNAL sid=1&gt;ago&lt;/SIGNAL&gt;....&lt;DocCreationTime&gt;&lt;TIMEX tid=1 type=DATE calDate=12201999&gt;12-20-1999&lt;/TIMEX&gt;&lt;/DocCreationTime&gt;</pre><p>if we wanted to indicate that we were unsure that we had not annotatedDURATION correctly, we could add this annotation:<blockquote><pre>&lt;CONFIDENCE tagType=DURATION tagID=1 confidenceValue=0.50/&gt;</pre></blockquote><p>where the lack of the optional attribute, <tt>attributeName</tt>,indicates that the confidence applies to the whole tag.<p>On the other hand, if we wanted to indicate that we weren't sure ifthetense of 'crashlanded' was really <tt>PAST</tt>, we could add thisannotation:<blockquote><pre>&lt;CONFIDENCE tagType=EVENT tagID=1 attributeName=tenseconfidenceValue=0.75/&gt;</pre></blockquote><p>Abstracting confidence measures as a separate tag frees the annotationfrom having to include a confidence value attribute in every tag andeliminates the problem of uncertainty over the exact attribute of atagthe confidence value applies to.<p>Note: currently <tt>LINK</tt>s do not have IDs.  If we want to applyconfidence measures to LINKs and/or their attributes, we will need togive each LINK a unique ID under this proposal.<p>As for how confidence values should be assigned in manual annotation,wefeel that, in a large-scale annotation effort such as TIMEBANK,  twoconditions should be satisfied:<ol><li>Fairly high inter-annotator agreement on the tag assignment in thetext.<li>Ease of use and habitability of the tool from the annotator'sperspective.</ol><p>Therefore, the annotation of a scalar value such as confidence shouldhave at least two features:<ul><li>The choice of confidence values should be as clearly defined aspossible to cover the options; this relates to the granularity andorders of magnitude as presented by Jerry Hobbs as well. This wouldsuggest a selection from a small set (e.g. low, mid, high; not_sure,sure, abolutely_sure). These could be interpreted or rescaled to a(0,1]range, if need be, for subsequent inference.<li>There should be a default value specified (at high (=1)) so thatitis not necessary to annotate all links and attributes for them with aconfidence.</ul>The constraint on human annotators to a subset of the possible valuesshould be documented in the annotation guidelines and implemented intheannotation tool.  And it would probably be best if the annotation tooldid not present numbers but rather natural language descriptions suchasthose suggested above, which would be represented in the underlyingannotation numerically.  For example, the annotator might pick"moderately certain", which would enter the annotation as .5.Moreover, for manual annotation, it does not seem that the 0 and 1values will be used/useful.  Presumably if the annotator doesn't trustan annotation at all s/he won't add it.  And, as was suggested above,1,at least for manual annotation, should be the default or unmarkedvalue,and so need not be noted, since it would bulk up the filesconsiderably,even if it were used only on entire tags.<h2>Bibliography</h2><p>Fowler, Martin (1999) <i>Refactoring: Improving the Design of ExistingCode</i>. Addison-Wesley, Reading, Massachusetts.<p>Setzer, Andrea (2001) <i>Temporal Information in Newswire Articles: AnAnnotationScheme and Corpus Study</i>, Doctoral Dissertation, University ofSheffield, Sheffield, UK.</body></html><!-- missing elements; e.g. granularity and relative proximity; -->-- e.g. 'shortly after'; so 3 eventsmay be ordered, but middle one closer to one than to the other aspect as signalRob: granularity relation = DUREX--><!-- additions:STATEattributes ::= stid class (?)DOAadds tid attributetense adds value 'NONE'relType add values 'IAFTER' 'IBEFORE' 'ID' (identity)using tense and aspect as a signal; how to represent thisGraham suggests abstracting thispossibilities(1) hard/strong semantic solution; 'hit' not in EVENT, is a signal<signal sid = s1><vform tns=present aspect=perfect></signal><signal sid = s2>hit</signal>add signalID to EVENT(2) signalID signalForm (mine) in link(3) reify signal (or related tags) for tense and aspectJames: how many zero morphemes can we cover in a dayscale, attribute of linkwhat tags get confidence measures?  link?  state, potentially, sincenot all states marked me: 'within ... of ...' is a discontinuous my thoughts:'one week before' might argue for <event> being signalled, because wegensym an event that is that distancebefore object of 'before'&lt;LINK &gt;To link temporal indexes across documents:http://www.w3.org/TR/xlink/XML Linking Language (XLink)maybe add a section on questions asked but not addressed in thisversionof TimeML, vs. those that are-->